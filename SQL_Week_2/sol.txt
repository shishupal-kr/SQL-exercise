To address the issues in your `SQL_Week_2/2_solution.sql` file, it appears that the tables and columns are not being recognized. Ensure that the database `pizza_runner` is correctly set up and contains the necessary tables and columns. Here are the corrected SQL queries for the questions:

### A. Pizza Metrics

1. **How many pizzas were ordered?**
   ```sql
   SELECT COUNT(order_id) AS total_order
   FROM customer_orders;
   ```

2. **How many unique customer orders were made?**
   ```sql
   SELECT COUNT(DISTINCT order_id) AS unique_customer_order
   FROM customer_orders;
   ```

3. **How many successful orders were delivered by each runner?**
   ```sql
   SELECT runner_id, COUNT(order_id) AS successful_orders
   FROM runner_orders
   WHERE cancellation IS NULL OR cancellation = ''
   GROUP BY runner_id;
   ```

4. **How many of each type of pizza was delivered?**
   ```sql
   SELECT pn.pizza_name, COUNT(co.order_id) AS total_delivered
   FROM customer_orders co
   JOIN pizza_names pn ON co.pizza_id = pn.pizza_id
   JOIN runner_orders ro ON co.order_id = ro.order_id
   WHERE ro.cancellation IS NULL OR ro.cancellation = ''
   GROUP BY pn.pizza_name;
   ```

5. **How many Vegetarian and Meatlovers were ordered by each customer?**
   ```sql
   SELECT co.customer_id, pn.pizza_name, COUNT(co.pizza_id) AS total_orders
   FROM customer_orders co
   JOIN pizza_names pn ON co.pizza_id = pn.pizza_id
   WHERE pn.pizza_name IN ('Vegetarian', 'Meatlovers')
   GROUP BY co.customer_id, pn.pizza_name;
   ```

6. **What was the maximum number of pizzas delivered in a single order?**
   ```sql
   SELECT MAX(pizza_count) AS max_pizzas_in_order
   FROM (
       SELECT order_id, COUNT(pizza_id) AS pizza_count
       FROM customer_orders
       GROUP BY order_id
   ) AS subquery;
   ```

7. **For each customer, how many delivered pizzas had at least 1 change and how many had no changes?**
   ```sql
   SELECT co.customer_id,
          SUM(CASE WHEN co.exclusions IS NOT NULL OR co.extras IS NOT NULL THEN 1 ELSE 0 END) AS pizzas_with_changes,
          SUM(CASE WHEN co.exclusions IS NULL AND co.extras IS NULL THEN 1 ELSE 0 END) AS pizzas_without_changes
   FROM customer_orders co
   JOIN runner_orders ro ON co.order_id = ro.order_id
   WHERE ro.cancellation IS NULL OR ro.cancellation = ''
   GROUP BY co.customer_id;
   ```

8. **How many pizzas were delivered that had both exclusions and extras?**
   ```sql
   SELECT COUNT(co.order_id) AS pizzas_with_exclusions_and_extras
   FROM customer_orders co
   JOIN runner_orders ro ON co.order_id = ro.order_id
   WHERE co.exclusions IS NOT NULL AND co.extras IS NOT NULL
     AND (ro.cancellation IS NULL OR ro.cancellation = '');
   ```

9. **What was the total volume of pizzas ordered for each hour of the day?**
   ```sql
   SELECT HOUR(order_time) AS order_hour, COUNT(order_id) AS total_pizzas_ordered
   FROM customer_orders
   GROUP BY HOUR(order_time);
   ```

10. **What was the volume of orders for each day of the week?**
    ```sql
    SELECT DAYNAME(order_time) AS order_day, COUNT(order_id) AS total_orders
    FROM customer_orders
    GROUP BY DAYNAME(order_time);
    ```

### B. Runner and Customer Experience

1. **How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)**
   ```sql
   SELECT WEEK(registration_date) AS week_number, COUNT(runner_id) AS runners_signed_up
   FROM runners
   GROUP BY WEEK(registration_date);
   ```

2. **What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?**
   ```sql
   SELECT runner_id, AVG(TIMESTAMPDIFF(MINUTE, order_time, pickup_time)) AS avg_pickup_time
   FROM runner_orders
   GROUP BY runner_id;
   ```

3. **Is there any relationship between the number of pizzas and how long the order takes to prepare?**
   ```sql
   SELECT COUNT(co.pizza_id) AS pizza_count, AVG(TIMESTAMPDIFF(MINUTE, order_time, pickup_time)) AS avg_preparation_time
   FROM customer_orders co
   JOIN runner_orders ro ON co.order_id = ro.order_id
   GROUP BY co.order_id;
   ```

4. **What was the average distance travelled for each customer?**
   ```sql
   SELECT customer_id, AVG(distance) AS avg_distance
   FROM customer_orders co
   JOIN runner_orders ro ON co.order_id = ro.order_id
   GROUP BY customer_id;
   ```

5. **What was the difference between the longest and shortest delivery times for all orders?**
   ```sql
   SELECT MAX(TIMESTAMPDIFF(MINUTE, pickup_time, delivery_time)) - MIN(TIMESTAMPDIFF(MINUTE, pickup_time, delivery_time)) AS delivery_time_difference
   FROM runner_orders;
   ```

6. **What was the average speed for each runner for each delivery and do you notice any trend for these values?**
   ```sql
   SELECT runner_id, AVG(distance / TIMESTAMPDIFF(HOUR, pickup_time, delivery_time)) AS avg_speed
   FROM runner_orders
   GROUP BY runner_id;
   ```

7. **What is the successful delivery percentage for each runner?**
   ```sql
   SELECT runner_id,
          COUNT(order_id) AS total_orders,
          SUM(CASE WHEN cancellation IS NULL OR cancellation = '' THEN 1 ELSE 0 END) AS successful_orders,
          (SUM(CASE WHEN cancellation IS NULL OR cancellation = '' THEN 1 ELSE 0 END) / COUNT(order_id)) * 100 AS success_percentage
   FROM runner_orders
   GROUP BY runner_id;
   ```

### C. Ingredient Optimisation

1. **What are the standard ingredients for each pizza?**
   ```sql
   SELECT pn.pizza_name, pt.topping_name
   FROM pizza_recipes pr
   JOIN pizza_names pn ON pr.pizza_id = pn.pizza_id
   JOIN pizza_toppings pt ON pr.topping_id = pt.topping_id;
   ```

2. **What was the most commonly added extra?**
   ```sql
   SELECT extras, COUNT(*) AS count
   FROM customer_orders
   WHERE extras IS NOT NULL
   GROUP BY extras
   ORDER BY count DESC
   LIMIT 1;
   ```

3. **What was the most common exclusion?**
   ```sql
   SELECT exclusions, COUNT(*) AS count
   FROM customer_orders
   WHERE exclusions IS NOT NULL
   GROUP BY exclusions
   ORDER BY count DESC
   LIMIT 1;
   ```

4. **Generate an order item for each record in the customers\_orders table in the format of one of the following:**
   ```sql
   SELECT co.order_id, pn.pizza_name,
          CASE
              WHEN co.exclusions IS NOT NULL AND co.extras IS NOT NULL THEN CONCAT(pn.pizza_name, ' - Exclude ', co.exclusions, ' - Extra ', co.extras)
              WHEN co.exclusions IS NOT NULL THEN CONCAT(pn.pizza_name, ' - Exclude ', co.exclusions)
              WHEN co.extras IS NOT NULL THEN CONCAT(pn.pizza_name, ' - Extra ', co.extras)
              ELSE pn.pizza_name
          END AS order_item
   FROM customer_orders co
   JOIN pizza_names pn ON co.pizza_id = pn.pizza_id;
   ```

5. **Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer\_orders table and add a 2x in front of any relevant ingredients**
   ```sql
   SELECT co.order_id, pn.pizza_name,
          GROUP_CONCAT(DISTINCT CASE
              WHEN pt.topping_name IN (co.extras) THEN CONCAT('2x', pt.topping_name)
              ELSE pt.topping_name
          END ORDER BY pt.topping_name SEPARATOR ', ') AS ingredients
   FROM customer_orders co
   JOIN pizza_recipes pr ON co.pizza_id = pr.pizza_id
   JOIN pizza_toppings pt ON pr.topping_id = pt.topping_id
   JOIN pizza_names pn ON co.pizza_id = pn.pizza_id
   GROUP BY co.order_id, pn.pizza_name;
   ```

6. **What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?**
   ```sql
   SELECT pt.topping_name, COUNT(*) AS total_quantity
   FROM customer_orders co
   JOIN pizza_recipes pr ON co.pizza_id = pr.pizza_id
   JOIN pizza_toppings pt ON pr.topping_id = pt.topping_id
   JOIN runner_orders ro ON co.order_id = ro.order_id
   WHERE ro.cancellation IS NULL OR ro.cancellation = ''
   GROUP BY pt.topping_name
   ORDER BY total_quantity DESC;
   ```

### D. Pricing and Ratings

1. **If a Meat Lovers pizza costs \$12 and Vegetarian costs \$10 and there were no charges for changes - how much money has Pizza Runner made so far if there are no delivery fees?**
   ```sql
   SELECT SUM(CASE
              WHEN pn.pizza_name = 'Meat Lovers' THEN 12
              WHEN pn.pizza_name = 'Vegetarian' THEN 10
              ELSE 0
          END) AS total_revenue
   FROM customer_orders co
   JOIN pizza_names pn ON co.pizza_id = pn.pizza_id;
   ```

2. **What if there was an additional \$1 charge for any pizza extras?**
   ```sql
   SELECT SUM(CASE
              WHEN pn.pizza_name = 'Meat Lovers' THEN 12
              WHEN pn.pizza_name = 'Vegetarian' THEN 10
              ELSE 0
          END + CASE
              WHEN co.extras IS NOT NULL THEN 1
              ELSE 0
          END) AS total_revenue_with_extras
   FROM customer_orders co
   JOIN pizza_names pn ON co.pizza_id = pn.pizza_id;
   ```

3. **The Pizza Runner team now wants to add an additional ratings system that allows customers to rate their runner, how would you design an additional table for this new dataset - generate a schema for this new table and insert your own data for ratings for each successful customer order between 1 to 5.**
   ```sql
   CREATE TABLE runner_ratings (
       rating_id INT AUTO_INCREMENT PRIMARY KEY,
       order_id INT,
       customer_id INT,
       runner_id INT,
       rating INT CHECK (rating BETWEEN 1 AND 5),
       FOREIGN KEY (order_id) REFERENCES runner_orders(order_id),
       FOREIGN KEY (customer_id) REFERENCES customer_orders(customer_id),
       FOREIGN KEY (runner_id) REFERENCES runners(runner_id)
   );

   INSERT INTO runner_ratings (order_id, customer_id, runner_id, rating)
   VALUES (1, 1, 1, 5), (2, 2, 2, 4), (3, 3, 3, 3);
   ```

4. **Using your newly generated table - can you join all of the information together to form a table which has the following information for successful deliveries?**
   ```sql
   SELECT co.customer_id, ro.order_id, ro.runner_id, rr.rating, co.order_time, ro.pickup_time,
          TIMESTAMPDIFF(MINUTE, co.order_time, ro.pickup_time) AS time_between_order_and_pickup,
          TIMESTAMPDIFF(MINUTE, ro.pickup_time, ro.delivery_time) AS delivery_duration,
          ro.distance / TIMESTAMPDIFF(HOUR, ro.pickup_time, ro.delivery_time) AS avg_speed,
          COUNT(co.pizza_id) AS total_pizzas
   FROM customer_orders co
   JOIN runner_orders ro ON co.order_id = ro.order_id
   JOIN runner_ratings rr ON ro.order_id = rr.order_id
   WHERE ro.cancellation IS NULL OR ro.cancellation = ''
   GROUP BY co.customer_id, ro.order_id, ro.runner_id, rr.rating, co.order_time, ro.pickup_time, ro.delivery_time, ro.distance;
   ```

5. **If a Meat Lovers pizza was \$12 and Vegetarian \$10 fixed prices with no cost for extras and each runner is paid \$0.30 per kilometre traveled - how much money does Pizza Runner have left over after these deliveries?**
   ```sql
   SELECT SUM(CASE
              WHEN pn.pizza_name = 'Meat Lovers' THEN 12
              WHEN pn.pizza_name = 'Vegetarian' THEN 10
              ELSE 0
          END) - SUM(ro.distance * 0.30) AS net_revenue
   FROM customer_orders co
   JOIN pizza_names pn ON co.pizza_id = pn.pizza_id
   JOIN runner_orders ro ON co.order_id = ro.order_id
   WHERE ro.cancellation IS NULL OR ro.cancellation = '';
   ```

### E. Bonus Questions

1. **If Danny wants to expand his range of pizzas - how would this impact the existing data design? Write an INSERT statement to demonstrate what would happen if a new Supreme pizza with all the toppings was added to the Pizza Runner menu?**
   ```sql
   INSERT INTO pizza_names (pizza_id, pizza_name)
   VALUES (3, 'Supreme');

   INSERT INTO pizza_recipes (pizza_id, topping_id)
   SELECT 3, topping_id FROM pizza_toppings;
   ```

These queries should help you answer the questions related to pizza metrics, runner and customer experience, ingredient optimization, pricing and ratings, and bonus questions.